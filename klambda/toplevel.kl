"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3677) (cond ((= () V3677) ()) ((and (cons? V3677) (cons? (tl V3677))) (do (set (hd V3677) (hd (tl V3677))) (shen.multiple-set (tl (tl V3677))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3679) (declare V3679 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3691 V3692) (cond ((and (tuple? V3691) (and (cons? (snd V3691)) (element? (hd (snd V3691)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3691) (tl (snd V3691))) V3692)) ((and (tuple? V3691) (and (cons? (snd V3691)) (and (cons? (tl (snd V3691))) (and (= () (tl (tl (snd V3691)))) (and (cons? V3692) (and (= (hd (snd V3691)) (shen.exclamation)) (= (hd (tl (snd V3691))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3692))) (hd V3692))) ((and (tuple? V3691) (and (cons? (snd V3691)) (= (hd (snd V3691)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3691)) V3692) (let Find (head (shen.find-past-inputs Key? V3692)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3691) (and (cons? (snd V3691)) (and (= () (tl (snd V3691))) (= (hd (snd V3691)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3692) 0) (abort))) ((and (tuple? V3691) (and (cons? (snd V3691)) (= (hd (snd V3691)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3691)) V3692) (let Pastprint (shen.print-past-inputs Key? (reverse V3692) 0) (abort)))) (true V3691)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3694) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V3694) (nl 1)))

(defun shen.update_history (V3697 V3698) (set shen.*history* (cons V3697 V3698)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V3702 V3703) (cond ((= V3702 (shen.hat)) (simple-error "line read aborted")) ((element? V3702 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3703 (lambda E shen.nextline)) (let It (shen.record-it V3703) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V3703 (cons V3702 ()))) (@p Line V3703))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V3703 (cons V3702 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3709) (cond ((= + V3709) (set shen.*tc* true)) ((= - V3709) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3711) (shen.toplevel_evaluate V3711 (value shen.*tc*)))

(defun shen.find-past-inputs (V3714 V3715) (let F (shen.find V3714 V3715) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3718 V3719) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3718 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3719)))) (lambda X (shen.prefix? V3718 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3721) (cond ((and (cons? V3721) (= (hd V3721) (shen.space))) (shen.trim-gubbins (tl V3721))) ((and (cons? V3721) (= (hd V3721) (shen.newline))) (shen.trim-gubbins (tl V3721))) ((and (cons? V3721) (= (hd V3721) (shen.carriage-return))) (shen.trim-gubbins (tl V3721))) ((and (cons? V3721) (= (hd V3721) (shen.tab))) (shen.trim-gubbins (tl V3721))) ((and (cons? V3721) (= (hd V3721) (shen.left-round))) (shen.trim-gubbins (tl V3721))) (true V3721)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3730 V3731) (cond ((= () V3731) ()) ((and (cons? V3731) (V3730 (hd V3731))) (cons (hd V3731) (shen.find V3730 (tl V3731)))) ((cons? V3731) (shen.find V3730 (tl V3731))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3745 V3746) (cond ((= () V3745) true) ((and (cons? V3745) (and (cons? V3746) (= (hd V3746) (hd V3745)))) (shen.prefix? (tl V3745) (tl V3746))) (true false)))

(defun shen.print-past-inputs (V3758 V3759 V3760) (cond ((= () V3759) _) ((and (cons? V3759) (not (V3758 (hd V3759)))) (shen.print-past-inputs V3758 (tl V3759) (+ V3760 1))) ((and (cons? V3759) (tuple? (hd V3759))) (do (shen.prhush (shen.app V3760 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3759))) (shen.print-past-inputs V3758 (tl V3759) (+ V3760 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3763 V3764) (cond ((and (cons? V3763) (and (cons? (tl V3763)) (and (= : (hd (tl V3763))) (and (cons? (tl (tl V3763))) (and (= () (tl (tl (tl V3763)))) (= true V3764)))))) (shen.typecheck-and-evaluate (hd V3763) (hd (tl (tl V3763))))) ((and (cons? V3763) (cons? (tl V3763))) (do (shen.toplevel_evaluate (cons (hd V3763) ()) V3764) (do (nl 1) (shen.toplevel_evaluate (tl V3763) V3764)))) ((and (cons? V3763) (and (= () (tl V3763)) (= true V3764))) (shen.typecheck-and-evaluate (hd V3763) (gensym A))) ((and (cons? V3763) (and (= () (tl V3763)) (= false V3764))) (let Eval (shen.eval-without-macros (hd V3763)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3767 V3768) (let Typecheck (shen.typecheck V3767 V3768) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3767) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3770) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3770) V3770))

(defun shen.extract-pvars (V3776) (cond ((shen.pvar? V3776) (cons V3776 ())) ((cons? V3776) (union (shen.extract-pvars (hd V3776)) (shen.extract-pvars (tl V3776)))) (true ())))

(defun shen.mult_subst (V3784 V3785 V3786) (cond ((= () V3784) V3786) ((= () V3785) V3786) ((and (cons? V3784) (cons? V3785)) (shen.mult_subst (tl V3784) (tl V3785) (subst (hd V3784) (hd V3785) V3786))) (true (shen.f_error shen.mult_subst))))



