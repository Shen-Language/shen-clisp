"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1625) (let Parse_shen.<predicate*> (shen.<predicate*> V1625) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1634 V1635) (cond ((and (cons? V1635) (and (cons? (tl V1635)) (= () (tl (tl V1635))))) (simple-error (cn "prolog syntax error in " (shen.app V1634 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1635)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1634 "
" shen.a))))))

(defun shen.next-50 (V1642 V1643) (cond ((= () V1643) "") ((= 0 V1642) "") ((cons? V1643) (cn (shen.decons-string (hd V1643)) (shen.next-50 (- V1642 1) (tl V1643)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1645) (cond ((and (cons? V1645) (and (= cons (hd V1645)) (and (cons? (tl V1645)) (and (cons? (tl (tl V1645))) (= () (tl (tl (tl V1645)))))))) (shen.app (shen.eval-cons V1645) " " shen.s)) (true (shen.app V1645 " " shen.r))))

(defun shen.insert-predicate (V1648 V1649) (cond ((and (cons? V1649) (and (cons? (tl V1649)) (= () (tl (tl V1649))))) (cons (cons V1648 (hd V1649)) (cons :- (tl V1649)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1651) (if (cons? (hd V1651)) (let Parse_X (hd (hd V1651)) (shen.pair (hd (shen.pair (tl (hd V1651)) (shen.hdtl V1651))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1653) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1653) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1653) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1655) (let Parse_shen.<head*> (shen.<head*> V1655) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1657) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1657) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1657) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1659) (if (cons? (hd V1659)) (let Parse_X (hd (hd V1659)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1659)) (shen.hdtl V1659))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1665) (cond ((and (cons? V1665) (and (= cons (hd V1665)) (and (cons? (tl V1665)) (and (cons? (tl (tl V1665))) (= () (tl (tl (tl V1665)))))))) (and (shen.legitimate-term? (hd (tl V1665))) (shen.legitimate-term? (hd (tl (tl V1665)))))) ((and (cons? V1665) (and (= mode (hd V1665)) (and (cons? (tl V1665)) (and (cons? (tl (tl V1665))) (and (= + (hd (tl (tl V1665)))) (= () (tl (tl (tl V1665))))))))) (shen.legitimate-term? (hd (tl V1665)))) ((and (cons? V1665) (and (= mode (hd V1665)) (and (cons? (tl V1665)) (and (cons? (tl (tl V1665))) (and (= - (hd (tl (tl V1665)))) (= () (tl (tl (tl V1665))))))))) (shen.legitimate-term? (hd (tl V1665)))) ((cons? V1665) false) (true true)))

(defun shen.eval-cons (V1667) (cond ((and (cons? V1667) (and (= cons (hd V1667)) (and (cons? (tl V1667)) (and (cons? (tl (tl V1667))) (= () (tl (tl (tl V1667)))))))) (cons (shen.eval-cons (hd (tl V1667))) (shen.eval-cons (hd (tl (tl V1667)))))) ((and (cons? V1667) (and (= mode (hd V1667)) (and (cons? (tl V1667)) (and (cons? (tl (tl V1667))) (= () (tl (tl (tl V1667)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1667))) (tl (tl V1667))))) (true V1667)))

(defun shen.<body*> (V1669) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1669) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1669) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1671) (let YaccParse (if (and (cons? (hd V1671)) (= ! (hd (hd V1671)))) (shen.pair (hd (shen.pair (tl (hd V1671)) (shen.hdtl V1671))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1671)) (let Parse_X (hd (hd V1671)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1671)) (shen.hdtl V1671))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1673) (if (cons? (hd V1673)) (let Parse_X (hd (hd V1673)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1673)) (shen.hdtl V1673))) Parse_X) (fail))) (fail)))

(defun cut (V1677 V1678 V1679) (let Result (thaw V1679) (if (= Result false) V1677 Result)))

(defun shen.insert_modes (V1681) (cond ((and (cons? V1681) (and (= mode (hd V1681)) (and (cons? (tl V1681)) (and (cons? (tl (tl V1681))) (= () (tl (tl (tl V1681)))))))) V1681) ((= () V1681) ()) ((cons? V1681) (cons (cons mode (cons (hd V1681) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1681)) (cons - ()))))) (true V1681)))

(defun shen.s-prolog (V1683) (map (lambda X (eval X)) (shen.prolog->shen V1683)))

(defun shen.prolog->shen (V1685) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1685)))))

(defun shen.s-prolog_clause (V1687) (cond ((and (cons? V1687) (and (cons? (tl V1687)) (and (= :- (hd (tl V1687))) (and (cons? (tl (tl V1687))) (= () (tl (tl (tl V1687)))))))) (cons (hd V1687) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1687)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1689) (cond ((and (cons? V1689) (and (cons? (tl V1689)) (and (= :- (hd (tl V1689))) (and (cons? (tl (tl V1689))) (and (= () (tl (tl (tl V1689)))) (< (shen.complexity_head (hd V1689)) (value shen.*maxcomplexity*))))))) (cons V1689 ())) ((and (cons? V1689) (and (cons? (hd V1689)) (and (cons? (tl V1689)) (and (= :- (hd (tl V1689))) (and (cons? (tl (tl V1689))) (= () (tl (tl (tl V1689))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1689))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1689)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1689)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1689)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1695) (cond ((cons? V1695) (shen.product (map (lambda X (shen.complexity X)) (tl V1695)))) (true (shen.f_error shen.complexity_head))))

(defun shen.complexity (V1704) (cond ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (hd (tl V1704))) (and (= mode (hd (hd (tl V1704)))) (and (cons? (tl (hd (tl V1704)))) (and (cons? (tl (tl (hd (tl V1704))))) (and (= () (tl (tl (tl (hd (tl V1704)))))) (and (cons? (tl (tl V1704))) (= () (tl (tl (tl V1704))))))))))))) (shen.complexity (hd (tl V1704)))) ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (hd (tl V1704))) (and (cons? (tl (tl V1704))) (and (= + (hd (tl (tl V1704)))) (= () (tl (tl (tl V1704)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V1704))) (tl (tl V1704))))) (shen.complexity (cons mode (cons (tl (hd (tl V1704))) (tl (tl V1704)))))))) ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (hd (tl V1704))) (and (cons? (tl (tl V1704))) (and (= - (hd (tl (tl V1704)))) (= () (tl (tl (tl V1704)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V1704))) (tl (tl V1704))))) (shen.complexity (cons mode (cons (tl (hd (tl V1704))) (tl (tl V1704))))))) ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (tl (tl V1704))) (and (= () (tl (tl (tl V1704)))) (variable? (hd (tl V1704)))))))) 1) ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (tl (tl V1704))) (and (= + (hd (tl (tl V1704)))) (= () (tl (tl (tl V1704))))))))) 2) ((and (cons? V1704) (and (= mode (hd V1704)) (and (cons? (tl V1704)) (and (cons? (tl (tl V1704))) (and (= - (hd (tl (tl V1704)))) (= () (tl (tl (tl V1704))))))))) 1) (true (shen.complexity (cons mode (cons V1704 (cons + ())))))))

(defun shen.product (V1706) (cond ((= () V1706) 1) ((cons? V1706) (* (hd V1706) (shen.product (tl V1706)))) (true (shen.f_error shen.product))))

(defun shen.s-prolog_literal (V1708) (cond ((and (cons? V1708) (and (= is (hd V1708)) (and (cons? (tl V1708)) (and (cons? (tl (tl V1708))) (= () (tl (tl (tl V1708)))))))) (cons bind (cons (hd (tl V1708)) (cons (shen.insert_deref (hd (tl (tl V1708)))) ())))) ((and (cons? V1708) (and (= when (hd V1708)) (and (cons? (tl V1708)) (= () (tl (tl V1708)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1708))) ()))) ((and (cons? V1708) (and (= bind (hd V1708)) (and (cons? (tl V1708)) (and (cons? (tl (tl V1708))) (= () (tl (tl (tl V1708)))))))) (cons bind (cons (hd (tl V1708)) (cons (shen.insert_lazyderef (hd (tl (tl V1708)))) ())))) ((and (cons? V1708) (and (= fwhen (hd V1708)) (and (cons? (tl V1708)) (= () (tl (tl V1708)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1708))) ()))) ((cons? V1708) V1708) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1710) (cond ((variable? V1710) (cons shen.deref (cons V1710 (cons ProcessN ())))) ((cons? V1710) (cons (shen.insert_deref (hd V1710)) (shen.insert_deref (tl V1710)))) (true V1710)))

(defun shen.insert_lazyderef (V1712) (cond ((variable? V1712) (cons shen.lazyderef (cons V1712 (cons ProcessN ())))) ((cons? V1712) (cons (shen.insert_lazyderef (hd V1712)) (shen.insert_lazyderef (tl V1712)))) (true V1712)))

(defun shen.group_clauses (V1714) (cond ((= () V1714) ()) ((cons? V1714) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1714) X)) V1714) (let Rest (difference V1714 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1719 V1720) (cond ((= () V1720) ()) ((cons? V1720) (if (V1719 (hd V1720)) (cons (hd V1720) (shen.collect V1719 (tl V1720))) (shen.collect V1719 (tl V1720)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1739 V1740) (cond ((and (cons? V1739) (and (cons? (hd V1739)) (and (cons? V1740) (cons? (hd V1740))))) (= (hd (hd V1739)) (hd (hd V1740)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1742) (let F (shen.procedure_name V1742) (let Shen (shen.clauses-to-shen F V1742) Shen)))

(defun shen.procedure_name (V1756) (cond ((and (cons? V1756) (and (cons? (hd V1756)) (cons? (hd (hd V1756))))) (hd (hd (hd V1756)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1759 V1760) (let Linear (map (lambda X (shen.linearise-clause X)) V1760) (let Arity (shen.prolog-aritycheck V1759 (map (lambda X (head X)) V1760)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1759 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1762) (cond ((not (shen.occurs? cut V1762)) V1762) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1762 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1770 V1771) (cond ((= V1771 V1770) false) (true V1771)))

(defun shen.nest-disjunct (V1773) (cond ((and (cons? V1773) (= () (tl V1773))) (hd V1773)) ((cons? V1773) (shen.lisp-or (hd V1773) (shen.nest-disjunct (tl V1773)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1776 V1777) (cons let (cons Case (cons V1776 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1777 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1782 V1783) (cond ((and (cons? V1783) (= () (tl V1783))) (- (length (hd V1783)) 1)) ((and (cons? V1783) (cons? (tl V1783))) (if (= (length (hd V1783)) (length (hd (tl V1783)))) (shen.prolog-aritycheck V1782 (tl V1783)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1782 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1785) (cond ((and (cons? V1785) (and (cons? (tl V1785)) (and (= :- (hd (tl V1785))) (and (cons? (tl (tl V1785))) (= () (tl (tl (tl V1785)))))))) (let Linear (shen.linearise (cons (hd V1785) (tl (tl V1785)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1787) (cond ((and (cons? V1787) (and (cons? (tl V1787)) (= () (tl (tl V1787))))) (cons (shen.explicit_modes (hd V1787)) (cons :- (cons (shen.cf_help (hd (tl V1787))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1789) (cond ((cons? V1789) (cons (hd V1789) (map (lambda X (shen.em_help X)) (tl V1789)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1791) (cond ((and (cons? V1791) (and (= mode (hd V1791)) (and (cons? (tl V1791)) (and (cons? (tl (tl V1791))) (= () (tl (tl (tl V1791)))))))) V1791) (true (cons mode (cons V1791 (cons + ()))))))

(defun shen.cf_help (V1793) (cond ((and (cons? V1793) (and (= where (hd V1793)) (and (cons? (tl V1793)) (and (cons? (hd (tl V1793))) (and (= = (hd (hd (tl V1793)))) (and (cons? (tl (hd (tl V1793)))) (and (cons? (tl (tl (hd (tl V1793))))) (and (= () (tl (tl (tl (hd (tl V1793)))))) (and (cons? (tl (tl V1793))) (= () (tl (tl (tl V1793))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1793)))) (shen.cf_help (hd (tl (tl V1793)))))) (true V1793)))

(defun occurs-check (V1799) (cond ((= + V1799) (set shen.*occurs* true)) ((= - V1799) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1802 V1803) (cond ((and (cons? V1802) (and (cons? (hd V1802)) (and (cons? (tl V1802)) (and (= :- (hd (tl V1802))) (and (cons? (tl (tl V1802))) (= () (tl (tl (tl V1802))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1802)) (cons (shen.continuation_call (tl (hd V1802)) (hd (tl (tl V1802)))) ()))) V1803) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1806 V1807) (let VTerms (cons ProcessN (shen.extract_vars V1806)) (let VBody (shen.extract_vars V1807) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1807)))))

(defun remove (V1810 V1811) (shen.remove-h V1810 V1811 ()))

(defun shen.remove-h (V1818 V1819 V1820) (cond ((= () V1819) (reverse V1820)) ((and (cons? V1819) (= (hd V1819) V1818)) (shen.remove-h (hd V1819) (tl V1819) V1820)) ((cons? V1819) (shen.remove-h V1818 (tl V1819) (cons (hd V1819) V1820))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V1823 V1824) (cond ((and (= () V1823) (= () V1824)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V1824) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1823 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V1823) (cons call (cons shen.the (cons shen.continuation (cons V1824 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1823 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V1824 ())))) ())))))))))))

(defun shen.make_mu_application (V1827 V1828) (cond ((and (cons? V1827) (and (= shen.mu (hd V1827)) (and (cons? (tl V1827)) (and (= () (hd (tl V1827))) (and (cons? (tl (tl V1827))) (and (= () (tl (tl (tl V1827)))) (= () V1828))))))) (hd (tl (tl V1827)))) ((and (cons? V1827) (and (= shen.mu (hd V1827)) (and (cons? (tl V1827)) (and (cons? (hd (tl V1827))) (and (cons? (tl (tl V1827))) (and (= () (tl (tl (tl V1827)))) (cons? V1828))))))) (cons (cons shen.mu (cons (hd (hd (tl V1827))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V1827))) (tl (tl V1827)))) (tl V1828)) ()))) (cons (hd V1828) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V1837 V1838) (cond ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (hd (tl (hd V1837)))) (and (= mode (hd (hd (tl (hd V1837))))) (and (cons? (tl (hd (tl (hd V1837))))) (and (cons? (tl (tl (hd (tl (hd V1837)))))) (and (= () (tl (tl (tl (hd (tl (hd V1837))))))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (= () (tl (tl V1837))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V1837))))) (tl (tl (hd V1837))))) (tl V1837)) (hd (tl (tl (hd (tl (hd V1837)))))))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (= _ (hd (tl (hd V1837)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V1837)))) V1838)) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (shen.ephemeral_variable? (hd (tl (hd V1837))) (hd (tl V1837))))))))))) (subst (hd (tl V1837)) (hd (tl (hd V1837))) (shen.mu_reduction (hd (tl (tl (hd V1837)))) V1838))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (variable? (hd (tl (hd V1837)))))))))))) (cons let (cons (hd (tl (hd V1837))) (cons shen.be (cons (hd (tl V1837)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1837)))) V1838) ()))))))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (and (= - V1838) (shen.prolog_constant? (hd (tl (hd V1837))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1837))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1837))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1837)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (and (= + V1838) (shen.prolog_constant? (hd (tl (hd V1837))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1837))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1837))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1837)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V1837))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1837)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (hd (tl (hd V1837)))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (= - V1838)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1837))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1837)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1837)))) (tl (tl (hd V1837))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1837) (and (cons? (hd V1837)) (and (= shen.mu (hd (hd V1837))) (and (cons? (tl (hd V1837))) (and (cons? (hd (tl (hd V1837)))) (and (cons? (tl (tl (hd V1837)))) (and (= () (tl (tl (tl (hd V1837))))) (and (cons? (tl V1837)) (and (= () (tl (tl V1837))) (= + V1838)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1837))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1837)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1837)))) (tl (tl (hd V1837))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V1837)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V1837))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1837)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V1837)))

(defun shen.rcons_form (V1840) (cond ((cons? V1840) (cons cons (cons (shen.rcons_form (hd V1840)) (cons (shen.rcons_form (tl V1840)) ())))) (true V1840)))

(defun shen.remove_modes (V1842) (cond ((and (cons? V1842) (and (= mode (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (and (= + (hd (tl (tl V1842)))) (= () (tl (tl (tl V1842))))))))) (shen.remove_modes (hd (tl V1842)))) ((and (cons? V1842) (and (= mode (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (and (= - (hd (tl (tl V1842)))) (= () (tl (tl (tl V1842))))))))) (shen.remove_modes (hd (tl V1842)))) ((cons? V1842) (cons (shen.remove_modes (hd V1842)) (shen.remove_modes (tl V1842)))) (true V1842)))

(defun shen.ephemeral_variable? (V1845 V1846) (and (variable? V1845) (variable? V1846)))

(defun shen.prolog_constant? (V1856) (cond ((cons? V1856) false) (true true)))

(defun shen.aum_to_shen (V1858) (cond ((and (cons? V1858) (and (= let (hd V1858)) (and (cons? (tl V1858)) (and (cons? (tl (tl V1858))) (and (= shen.be (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (cons? (tl (tl (tl (tl V1858))))) (and (= in (hd (tl (tl (tl (tl V1858)))))) (and (cons? (tl (tl (tl (tl (tl V1858)))))) (= () (tl (tl (tl (tl (tl (tl V1858)))))))))))))))) (cons let (cons (hd (tl V1858)) (cons (shen.aum_to_shen (hd (tl (tl (tl V1858))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1858))))))) ()))))) ((and (cons? V1858) (and (= shen.the (hd V1858)) (and (cons? (tl V1858)) (and (= shen.result (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.of (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= shen.dereferencing (hd (tl (tl (tl V1858))))) (and (cons? (tl (tl (tl (tl V1858))))) (= () (tl (tl (tl (tl (tl V1858))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V1858)))))) (cons ProcessN ())))) ((and (cons? V1858) (and (= if (hd V1858)) (and (cons? (tl V1858)) (and (cons? (tl (tl V1858))) (and (= shen.then (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (cons? (tl (tl (tl (tl V1858))))) (and (= shen.else (hd (tl (tl (tl (tl V1858)))))) (and (cons? (tl (tl (tl (tl (tl V1858)))))) (= () (tl (tl (tl (tl (tl (tl V1858)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V1858))) (cons (shen.aum_to_shen (hd (tl (tl (tl V1858))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1858))))))) ()))))) ((and (cons? V1858) (and (cons? (tl V1858)) (and (= is (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.a (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= shen.variable (hd (tl (tl (tl V1858))))) (= () (tl (tl (tl (tl V1858)))))))))))) (cons shen.pvar? (cons (hd V1858) ()))) ((and (cons? V1858) (and (cons? (tl V1858)) (and (= is (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.a (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= shen.non-empty (hd (tl (tl (tl V1858))))) (and (cons? (tl (tl (tl (tl V1858))))) (and (= list (hd (tl (tl (tl (tl V1858)))))) (= () (tl (tl (tl (tl (tl V1858))))))))))))))) (cons cons? (cons (hd V1858) ()))) ((and (cons? V1858) (and (= shen.rename (hd V1858)) (and (cons? (tl V1858)) (and (= shen.the (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.variables (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= in (hd (tl (tl (tl V1858))))) (and (cons? (tl (tl (tl (tl V1858))))) (and (= () (hd (tl (tl (tl (tl V1858)))))) (and (cons? (tl (tl (tl (tl (tl V1858)))))) (and (= and (hd (tl (tl (tl (tl (tl V1858))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1858))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1858)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1858)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1858)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V1858)))))))))) ((and (cons? V1858) (and (= shen.rename (hd V1858)) (and (cons? (tl V1858)) (and (= shen.the (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.variables (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= in (hd (tl (tl (tl V1858))))) (and (cons? (tl (tl (tl (tl V1858))))) (and (cons? (hd (tl (tl (tl (tl V1858)))))) (and (cons? (tl (tl (tl (tl (tl V1858)))))) (and (= and (hd (tl (tl (tl (tl (tl V1858))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1858))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1858)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1858)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1858)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V1858)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V1858)))))) (tl (tl (tl (tl (tl V1858))))))))))) ()))))) ((and (cons? V1858) (and (= bind (hd V1858)) (and (cons? (tl V1858)) (and (cons? (tl (tl V1858))) (and (= shen.to (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (cons? (tl (tl (tl (tl V1858))))) (and (= in (hd (tl (tl (tl (tl V1858)))))) (and (cons? (tl (tl (tl (tl (tl V1858)))))) (= () (tl (tl (tl (tl (tl (tl V1858)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V1858)) (cons (shen.chwild (hd (tl (tl (tl V1858))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1858))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V1858)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V1858) (and (cons? (tl V1858)) (and (= is (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= identical (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (and (= shen.to (hd (tl (tl (tl V1858))))) (and (cons? (tl (tl (tl (tl V1858))))) (= () (tl (tl (tl (tl (tl V1858)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V1858))))) (cons (hd V1858) ())))) ((= shen.failed! V1858) false) ((and (cons? V1858) (and (= shen.the (hd V1858)) (and (cons? (tl V1858)) (and (= head (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.of (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (= () (tl (tl (tl (tl V1858)))))))))))) (cons hd (tl (tl (tl V1858))))) ((and (cons? V1858) (and (= shen.the (hd V1858)) (and (cons? (tl V1858)) (and (= tail (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.of (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (= () (tl (tl (tl (tl V1858)))))))))))) (cons tl (tl (tl (tl V1858))))) ((and (cons? V1858) (and (= shen.pop (hd V1858)) (and (cons? (tl V1858)) (and (= shen.the (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.stack (hd (tl (tl V1858)))) (= () (tl (tl (tl V1858)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V1858) (and (= call (hd V1858)) (and (cons? (tl V1858)) (and (= shen.the (hd (tl V1858))) (and (cons? (tl (tl V1858))) (and (= shen.continuation (hd (tl (tl V1858)))) (and (cons? (tl (tl (tl V1858)))) (= () (tl (tl (tl (tl V1858)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V1858))))) ProcessN Continuation) ())))) (true V1858)))

(defun shen.chwild (V1860) (cond ((= V1860 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V1860) (map (lambda Z (shen.chwild Z)) V1860)) (true V1860)))

(defun shen.newpv (V1862) (let Count+1 (+ (<-address (value shen.*varcounter*) V1862) 1) (let IncVar (address-> (value shen.*varcounter*) V1862 Count+1) (let Vector (<-address (value shen.*prologvectors*) V1862) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V1862 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V1865 V1866) (let Vector (<-address (value shen.*prologvectors*) V1865) (let BigVector (shen.resize-vector Vector (+ V1866 V1866) shen.-null-) (address-> (value shen.*prologvectors*) V1865 BigVector))))

(defun shen.resize-vector (V1870 V1871 V1872) (let BigVector (address-> (absvector (+ 1 V1871)) 0 V1871) (shen.copy-vector V1870 BigVector (limit V1870) V1871 V1872)))

(defun shen.copy-vector (V1878 V1879 V1880 V1881 V1882) (shen.copy-vector-stage-2 (+ 1 V1880) (+ V1881 1) V1882 (shen.copy-vector-stage-1 1 V1878 V1879 (+ 1 V1880))))

(defun shen.copy-vector-stage-1 (V1890 V1891 V1892 V1893) (cond ((= V1893 V1890) V1892) (true (shen.copy-vector-stage-1 (+ 1 V1890) V1891 (address-> V1892 V1890 (<-address V1891 V1890)) V1893))))

(defun shen.copy-vector-stage-2 (V1901 V1902 V1903 V1904) (cond ((= V1902 V1901) V1904) (true (shen.copy-vector-stage-2 (+ V1901 1) V1902 V1903 (address-> V1904 V1901 V1903)))))

(defun shen.mk-pvar (V1906) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V1906))

(defun shen.pvar? (V1908) (trap-error (and (absvector? V1908) (= (<-address V1908 0) shen.pvar)) (lambda E false)))

(defun shen.bindv (V1912 V1913 V1914) (let Vector (<-address (value shen.*prologvectors*) V1914) (address-> Vector (<-address V1912 1) V1913)))

(defun shen.unbindv (V1917 V1918) (let Vector (<-address (value shen.*prologvectors*) V1918) (address-> Vector (<-address V1917 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V1922 V1923 V1924) (cond ((and (cons? V1922) (and (cons? (hd V1922)) (= () (tl V1922)))) (cons (hd (hd V1922)) (append (tl (hd V1922)) (cons V1923 (cons V1924 ()))))) ((and (cons? V1922) (cons? (hd V1922))) (let NewContinuation (shen.newcontinuation (tl V1922) V1923 V1924) (cons (hd (hd V1922)) (append (tl (hd V1922)) (cons V1923 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V1928 V1929 V1930) (cond ((= () V1928) V1930) ((and (cons? V1928) (cons? (hd V1928))) (cons freeze (cons (cons (hd (hd V1928)) (append (tl (hd V1928)) (cons V1929 (cons (shen.newcontinuation (tl V1928) V1929 V1930) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V1938 V1939 V1940) (shen.deref V1938 V1939))

(defun shen.measure&return (V1948 V1949 V1950) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V1948 V1949)))

(defun unify (V1955 V1956 V1957 V1958) (shen.lzy= (shen.lazyderef V1955 V1957) (shen.lazyderef V1956 V1957) V1957 V1958))

(defun shen.lzy= (V1980 V1981 V1982 V1983) (cond ((= V1981 V1980) (thaw V1983)) ((shen.pvar? V1980) (bind V1980 V1981 V1982 V1983)) ((shen.pvar? V1981) (bind V1981 V1980 V1982 V1983)) ((and (cons? V1980) (cons? V1981)) (shen.lzy= (shen.lazyderef (hd V1980) V1982) (shen.lazyderef (hd V1981) V1982) V1982 (freeze (shen.lzy= (shen.lazyderef (tl V1980) V1982) (shen.lazyderef (tl V1981) V1982) V1982 V1983)))) (true false)))

(defun shen.deref (V1986 V1987) (cond ((cons? V1986) (cons (shen.deref (hd V1986) V1987) (shen.deref (tl V1986) V1987))) (true (if (shen.pvar? V1986) (let Value (shen.valvector V1986 V1987) (if (= Value shen.-null-) V1986 (shen.deref Value V1987))) V1986))))

(defun shen.lazyderef (V1990 V1991) (if (shen.pvar? V1990) (let Value (shen.valvector V1990 V1991) (if (= Value shen.-null-) V1990 (shen.lazyderef Value V1991))) V1990))

(defun shen.valvector (V1994 V1995) (<-address (<-address (value shen.*prologvectors*) V1995) (<-address V1994 1)))

(defun unify! (V2000 V2001 V2002 V2003) (shen.lzy=! (shen.lazyderef V2000 V2002) (shen.lazyderef V2001 V2002) V2002 V2003))

(defun shen.lzy=! (V2025 V2026 V2027 V2028) (cond ((= V2026 V2025) (thaw V2028)) ((and (shen.pvar? V2025) (not (shen.occurs? V2025 (shen.deref V2026 V2027)))) (bind V2025 V2026 V2027 V2028)) ((and (shen.pvar? V2026) (not (shen.occurs? V2026 (shen.deref V2025 V2027)))) (bind V2026 V2025 V2027 V2028)) ((and (cons? V2025) (cons? V2026)) (shen.lzy=! (shen.lazyderef (hd V2025) V2027) (shen.lazyderef (hd V2026) V2027) V2027 (freeze (shen.lzy=! (shen.lazyderef (tl V2025) V2027) (shen.lazyderef (tl V2026) V2027) V2027 V2028)))) (true false)))

(defun shen.occurs? (V2040 V2041) (cond ((= V2041 V2040) true) ((cons? V2041) (or (shen.occurs? V2040 (hd V2041)) (shen.occurs? V2040 (tl V2041)))) (true false)))

(defun identical (V2046 V2047 V2048 V2049) (shen.lzy== (shen.lazyderef V2046 V2048) (shen.lazyderef V2047 V2048) V2048 V2049))

(defun shen.lzy== (V2071 V2072 V2073 V2074) (cond ((= V2072 V2071) (thaw V2074)) ((and (cons? V2071) (cons? V2072)) (shen.lzy== (shen.lazyderef (hd V2071) V2073) (shen.lazyderef (hd V2072) V2073) V2073 (freeze (shen.lzy== (tl V2071) (tl V2072) V2073 V2074)))) (true false)))

(defun shen.pvar (V2076) (cn "Var" (shen.app (<-address V2076 1) "" shen.a)))

(defun bind (V2081 V2082 V2083 V2084) (do (shen.bindv V2081 V2082 V2083) (let Result (thaw V2084) (do (shen.unbindv V2081 V2083) Result))))

(defun fwhen (V2102 V2103 V2104) (cond ((= true V2102) (thaw V2104)) ((= false V2102) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2102 "%" shen.s))))))

(defun call (V2120 V2121 V2122) (cond ((cons? V2120) (shen.call-help (function (shen.lazyderef (hd V2120) V2121)) (tl V2120) V2121 V2122)) (true false)))

(defun shen.call-help (V2127 V2128 V2129 V2130) (cond ((= () V2128) (V2127 V2129 V2130)) ((cons? V2128) (shen.call-help (V2127 (hd V2128)) (tl V2128) V2129 V2130)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2132) (cond ((and (cons? V2132) (cons? (hd V2132))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2132)) (shen.insert-prolog-variables (cons (tl (hd V2132)) (cons (tl V2132) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2136 V2137 V2138) (cond ((and (cons? V2137) (and (cons? (tl V2137)) (= () (tl (tl V2137))))) (shen.intprolog-help-help V2136 (hd V2137) (hd (tl V2137)) V2138)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2143 V2144 V2145 V2146) (cond ((= () V2144) (V2143 V2146 (freeze (shen.call-rest V2145 V2146)))) ((cons? V2144) (shen.intprolog-help-help (V2143 (hd V2144)) (tl V2144) V2145 V2146)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2151 V2152) (cond ((= () V2151) true) ((and (cons? V2151) (and (cons? (hd V2151)) (cons? (tl (hd V2151))))) (shen.call-rest (cons (cons ((hd (hd V2151)) (hd (tl (hd V2151)))) (tl (tl (hd V2151)))) (tl V2151)) V2152)) ((and (cons? V2151) (and (cons? (hd V2151)) (= () (tl (hd V2151))))) ((hd (hd V2151)) V2152 (freeze (shen.call-rest (tl V2151) V2152)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2155 V2156) (shen.insert-prolog-variables-help V2155 (shen.flatten V2155) V2156))

(defun shen.insert-prolog-variables-help (V2164 V2165 V2166) (cond ((= () V2165) V2164) ((and (cons? V2165) (variable? (hd V2165))) (let V (shen.newpv V2166) (let XV/Y (subst V (hd V2165) V2164) (let Z-Y (remove (hd V2165) (tl V2165)) (shen.insert-prolog-variables-help XV/Y Z-Y V2166))))) ((cons? V2165) (shen.insert-prolog-variables-help V2164 (tl V2165) V2166)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2168) (let Vector (address-> (value shen.*prologvectors*) V2168 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2168 1) V2168)))



