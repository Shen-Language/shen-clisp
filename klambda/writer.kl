"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V3887 V3888) (trap-error (shen.prh V3887 V3888 0) (lambda E V3887)))

(defun shen.prh (V3892 V3893 V3894) (shen.prh V3892 V3893 (shen.write-char-and-inc V3892 V3893 V3894)))

(defun shen.write-char-and-inc (V3898 V3899 V3900) (do (write-byte (string->n (pos V3898 V3900)) V3899) (+ V3900 1)))

(defun print (V3902) (let String (shen.insert V3902 "~S") (let Print (shen.prhush String (stoutput)) V3902)))

(defun shen.prhush (V3905 V3906) (if (value *hush*) V3905 (pr V3905 V3906)))

(defun shen.mkstr (V3909 V3910) (cond ((string? V3909) (shen.mkstr-l (shen.proc-nl V3909) V3910)) (true (shen.mkstr-r (cons shen.proc-nl (cons V3909 ())) V3910))))

(defun shen.mkstr-l (V3913 V3914) (cond ((= () V3914) V3913) ((cons? V3914) (shen.mkstr-l (shen.insert-l (hd V3914) V3913) (tl V3914))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V3919 V3920) (cond ((= "" V3920) "") ((and (shen.+string? V3920) (and (= "~" (pos V3920 0)) (and (shen.+string? (tlstr V3920)) (= "A" (pos (tlstr V3920) 0))))) (cons shen.app (cons V3919 (cons (tlstr (tlstr V3920)) (cons shen.a ()))))) ((and (shen.+string? V3920) (and (= "~" (pos V3920 0)) (and (shen.+string? (tlstr V3920)) (= "R" (pos (tlstr V3920) 0))))) (cons shen.app (cons V3919 (cons (tlstr (tlstr V3920)) (cons shen.r ()))))) ((and (shen.+string? V3920) (and (= "~" (pos V3920 0)) (and (shen.+string? (tlstr V3920)) (= "S" (pos (tlstr V3920) 0))))) (cons shen.app (cons V3919 (cons (tlstr (tlstr V3920)) (cons shen.s ()))))) ((shen.+string? V3920) (shen.factor-cn (cons cn (cons (pos V3920 0) (cons (shen.insert-l V3919 (tlstr V3920)) ()))))) ((and (cons? V3920) (and (= cn (hd V3920)) (and (cons? (tl V3920)) (and (cons? (tl (tl V3920))) (= () (tl (tl (tl V3920)))))))) (cons cn (cons (hd (tl V3920)) (cons (shen.insert-l V3919 (hd (tl (tl V3920)))) ())))) ((and (cons? V3920) (and (= shen.app (hd V3920)) (and (cons? (tl V3920)) (and (cons? (tl (tl V3920))) (and (cons? (tl (tl (tl V3920)))) (= () (tl (tl (tl (tl V3920)))))))))) (cons shen.app (cons (hd (tl V3920)) (cons (shen.insert-l V3919 (hd (tl (tl V3920)))) (tl (tl (tl V3920))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V3922) (cond ((and (cons? V3922) (and (= cn (hd V3922)) (and (cons? (tl V3922)) (and (cons? (tl (tl V3922))) (and (cons? (hd (tl (tl V3922)))) (and (= cn (hd (hd (tl (tl V3922))))) (and (cons? (tl (hd (tl (tl V3922))))) (and (cons? (tl (tl (hd (tl (tl V3922)))))) (and (= () (tl (tl (tl (hd (tl (tl V3922))))))) (and (= () (tl (tl (tl V3922)))) (and (string? (hd (tl V3922))) (string? (hd (tl (hd (tl (tl V3922))))))))))))))))) (cons cn (cons (cn (hd (tl V3922)) (hd (tl (hd (tl (tl V3922)))))) (tl (tl (hd (tl (tl V3922)))))))) (true V3922)))

(defun shen.proc-nl (V3924) (cond ((= "" V3924) "") ((and (shen.+string? V3924) (and (= "~" (pos V3924 0)) (and (shen.+string? (tlstr V3924)) (= "%" (pos (tlstr V3924) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V3924))))) ((shen.+string? V3924) (cn (pos V3924 0) (shen.proc-nl (tlstr V3924)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V3927 V3928) (cond ((= () V3928) V3927) ((cons? V3928) (shen.mkstr-r (cons shen.insert (cons (hd V3928) (cons V3927 ()))) (tl V3928))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V3931 V3932) (shen.insert-h V3931 V3932 ""))

(defun shen.insert-h (V3938 V3939 V3940) (cond ((= "" V3939) V3940) ((and (shen.+string? V3939) (and (= "~" (pos V3939 0)) (and (shen.+string? (tlstr V3939)) (= "A" (pos (tlstr V3939) 0))))) (cn V3940 (shen.app V3938 (tlstr (tlstr V3939)) shen.a))) ((and (shen.+string? V3939) (and (= "~" (pos V3939 0)) (and (shen.+string? (tlstr V3939)) (= "R" (pos (tlstr V3939) 0))))) (cn V3940 (shen.app V3938 (tlstr (tlstr V3939)) shen.r))) ((and (shen.+string? V3939) (and (= "~" (pos V3939 0)) (and (shen.+string? (tlstr V3939)) (= "S" (pos (tlstr V3939) 0))))) (cn V3940 (shen.app V3938 (tlstr (tlstr V3939)) shen.s))) ((shen.+string? V3939) (shen.insert-h V3938 (tlstr V3939) (cn V3940 (pos V3939 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V3944 V3945 V3946) (cn (shen.arg->str V3944 V3946) V3945))

(defun shen.arg->str (V3954 V3955) (cond ((= V3954 (fail)) "...") ((shen.list? V3954) (shen.list->str V3954 V3955)) ((string? V3954) (shen.str->str V3954 V3955)) ((absvector? V3954) (shen.vector->str V3954 V3955)) (true (shen.atom->str V3954))))

(defun shen.list->str (V3958 V3959) (cond ((= shen.r V3959) (@s "(" (@s (shen.iter-list V3958 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V3958 V3959 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V3973 V3974 V3975) (cond ((= () V3973) "") ((= 0 V3975) "... etc") ((and (cons? V3973) (= () (tl V3973))) (shen.arg->str (hd V3973) V3974)) ((cons? V3973) (@s (shen.arg->str (hd V3973) V3974) (@s " " (shen.iter-list (tl V3973) V3974 (- V3975 1))))) (true (@s "|" (@s " " (shen.arg->str V3973 V3974))))))

(defun shen.str->str (V3982 V3983) (cond ((= shen.a V3983) V3982) (true (@s (n->string 34) (@s V3982 (n->string 34))))))

(defun shen.vector->str (V3986 V3987) (if (shen.print-vector? V3986) ((function (<-address V3986 0)) V3986) (if (vector? V3986) (@s "<" (@s (shen.iter-vector V3986 1 V3987 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V3986 0 V3987 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V3989) (let Zero (<-address V3989 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V3991) (trap-error (do (ps V3991) true) (lambda E false)))

(defun shen.tuple (V3993) (cn "(@p " (shen.app (<-address V3993 1) (cn " " (shen.app (<-address V3993 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V4004 V4005 V4006 V4007) (cond ((= 0 V4007) "... etc") (true (let Item (trap-error (<-address V4004 V4005) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V4004 (+ V4005 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4006) (@s (shen.arg->str Item V4006) (@s " " (shen.iter-vector V4004 (+ V4005 1) V4006 (- V4007 1)))))))))))

(defun shen.atom->str (V4009) (trap-error (str V4009) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4011) (or (empty? V4011) (cons? V4011)))



